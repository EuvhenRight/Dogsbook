{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Hoc/withAuhRedirect.js","components/Dialogs/DialogItems/DialogsItems.jsx","components/Dialogs/MessagesItem/MessagesItem.jsx","components/Dialogs/DialogsForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","dialogs","dialogsItems","messages","active","dialogsavatar","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","_React$Component","Object","_Users_macbook_Documents_JS_React_2_0_it_camasutra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_macbook_Documents_JS_React_2_0_it_camasutra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_macbook_Documents_JS_React_2_0_it_camasutra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","apply","arguments","_Users_macbook_Documents_JS_React_2_0_it_camasutra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","_Users_macbook_Documents_JS_React_2_0_it_camasutra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","to","React","connect","SelectedDialog","_ref","isActive","classes","DialogsItems","react_default","react_router_dom","className","id","src","avatar","name","MessagesItems","message","maxLength100","maxLengthCreator","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogPage","dialogElements","map","d","DialogItems_DialogsItems","messagesElements","m","MessagesItem","Dialogs_DialogsForm","values","newMessageBody","newPostTextMessage","compose","dispatch","newMessageBodyActionCreator"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,aAAA,8BAAAC,SAAA,0BAAAC,OAAA,wBAAAC,cAAA,6KCGdC,EAA6B,SAACC,GAAD,MAAW,CACxCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAc,IAErCC,EAFqC,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAInC,OAAIR,KAAKS,MAAMjB,OAERkB,EAAAC,EAAAC,cAACjB,EAAcK,KAAKS,OAFGC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAI,eAJTlB,EAAA,CAEXmB,IAAMpB,WAWtC,OAHmCqB,YAAQ1B,EAAR0B,CAAoCpB,oGCdrEqB,EAAiB,SAAAC,GAAA,OAAAA,EAAGC,SAA0BC,IAAQhC,OAASgC,IAAQlC,cAa9DmC,EAXM,SAACZ,GAClB,OACIa,EAAAX,EAAAC,cAAA,WACIU,EAAAX,EAAAC,cAACW,EAAA,EAAD,CAASC,UAAWP,EAAgBH,GAAI,YAAcL,EAAMgB,IACxDH,EAAAX,EAAAC,cAAA,OAAKY,UAAWJ,IAAQ/B,cAAeqC,IAAKjB,EAAMkB,SACjDlB,EAAMmB,QCGRC,EAVO,SAACpB,GAEnB,OACIa,EAAAX,EAAAC,cAAA,OAAKY,UAAWJ,IAAQU,SAEnBrB,EAAMqB,0CCFbC,EAAeC,YAAiB,KAiCvBC,EAHUC,YAAU,CAACC,KAAM,WAAjBD,CA5BL,SAACzB,GAOjB,OACIa,EAAAX,EAAAC,cAAA,QAAMwB,SAAU3B,EAAM4B,cAClBf,EAAAX,EAAAC,cAAA,WACIU,EAAAX,EAAAC,cAAC0B,EAAA,EAAD,CACIC,UAAWC,IACXZ,KAAM,qBACNa,YAAa,gBACbC,SAAU,CAACC,IAAUZ,MAK7BT,EAAAX,EAAAC,cAAA,WACIU,EAAAX,EAAAC,cAAA,iCCoBDgC,EA1CC,SAACnC,GAEb,IAAIlB,EAAQkB,EAAMoC,WAEdC,EACAvD,EAAMN,QAAQ8D,IAAI,SAAAC,GAAC,OAAI1B,EAAAX,EAAAC,cAACqC,EAAD,CAAc1C,IAAKyC,EAAEvB,GAAIA,GAAIuB,EAAEvB,GAAIG,KAAMoB,EAAEpB,KAAMD,OAAQqB,EAAErB,WAElFuB,EACA3D,EAAMJ,SAAS4D,IAAI,SAAAI,GAAC,OAAI7B,EAAAX,EAAAC,cAACwC,EAAD,CAAe7C,IAAK4C,EAAE1B,GAAIA,GAAI0B,EAAE1B,GAAIK,QAASqB,EAAErB,YAiB3E,OACIR,EAAAX,EAAAC,cAAA,OAAKY,UAAWJ,IAAQnC,SACpBqC,EAAAX,EAAAC,cAAA,OAAKY,UAAWJ,IAAQlC,cACnB4D,GAELxB,EAAAX,EAAAC,cAAA,OAAKY,UAAWJ,IAAQjC,UACpBmC,EAAAX,EAAAC,cAAA,WAAMsC,GACN5B,EAAAX,EAAAC,cAAA,WACGU,EAAAX,EAAAC,cAACyC,EAAD,CAAkBjB,SAjBV,SAACkB,GACpB7C,EAAM8C,eAAeD,EAAOE,mDCErBC,sBACX/D,IACAsB,YApBkB,SAACzB,GACnB,MAAO,CACHsD,WAAYtD,EAAMsD,aAID,SAACa,GACtB,MAAO,CAEHH,eAAgB,SAACA,GACbG,EAASC,YAA4BJ,QAQlCE,CAEmCb","file":"static/js/5.bd734695.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1uJ2V\",\"dialogsItems\":\"Dialogs_dialogsItems__2HBFP\",\"messages\":\"Dialogs_messages__1_uzI\",\"active\":\"Dialogs_active__3chAR\",\"dialogsavatar\":\"Dialogs_dialogsavatar__3vR5s\"};","import {Navigate} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) =>({// змінна для того щоб витащити из стора цю строку\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => { // Хок на редирект, коли ти не за логінений тебе не пустить на страницю\n\n    class RedirectComponent extends React.Component {\n        render () {\n            if(!this.props.isAuth) return <Navigate to={\"/login\"} />;\n\n            return <Component {...this.props} /> // Повертає Копмоненту зі всіма пропсами\n        }\n    }\n\n    let connectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);//  робимо Коннект, спочатку\n    // щоб витащити дані зі стора: isAuth: state.auth.isAuth\n\n    return connectAuthRedirectComponent;\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from './../Dialogs.module.css'\n\nconst SelectedDialog = ({ isActive }) => isActive ? classes.active : classes.dialogsItems;\n\nconst DialogsItems = (props) => {\n    return (\n        <div>\n            <NavLink className={SelectedDialog} to={'/dialogs/' + props.id}>\n                <img className={classes.dialogsavatar} src={props.avatar}></img>\n                {props.name}\n            </NavLink>\n        </div>\n    )\n}\n\nexport default DialogsItems;","import React from 'react';\n// import { NavLink } from 'react-router-dom';\nimport classes from './../Dialogs.module.css'\n\nconst MessagesItems = (props) => {\n\n    return (\n        <div className={classes.message}>\n\n            {props.message}\n        </div>\n    )\n}\n\nexport default MessagesItems;","import React from 'react';\nimport classes from './Dialogs.module.css'\nimport {Field, reduxForm} from \"redux-form\"; // форма для ведення месседжів\nimport {Textarea} from \"../general/FormsControl/FormsControl\";\nimport {maxLengthCreator, required} from \"../general/Validations/Validations\";\n\n\nconst maxLength100 = maxLengthCreator(100);\n\nconst DialogsForm = (props) => {\n\n    // let newPostEnterMessage = (e) =>{ // функція яка відправляє повідомлення по кнопці \"Ентер\"\n    //     if(e.key === \"Enter\") {\n    //         props.handleSubmit()\n    //     }\n    // }\n    return ( // дестретуктурізація  props.handleSubmit\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    component={Textarea}\n                    name={\"newPostTextMessage\"} // имʼя компоненти \"textarea\"\n                    placeholder={\"enter message\"}\n                    validate={[required, maxLength100]}\n                    // onKeyPress={} // onKeyPress - назва функціі\n                />\n                {/*  handleSubmit - це Редакс-Форма, в ньому йде формування всіх процесів в формі   */}\n            </div>\n            <div>\n                <button>\n                    Add message\n                </button>\n            </div>\n        </form>\n    )\n}\n\nconst DialogsReduxForm = reduxForm({form: \"Dialogs\"})(DialogsForm); // робимо упаковку для форми для того щоб їй\n// купував DialogsReduxForm (Редакс-Форма)\n\nexport default DialogsReduxForm;","import React from 'react';\nimport classes from './Dialogs.module.css'\nimport DialogsItems from './DialogItems/DialogsItems';\nimport MessagesItems from './MessagesItem/MessagesItem';\nimport DialogsReduxForm from \"./DialogsForm\";\n\n\nconst Dialogs = (props) => {\n\n    let state = props.dialogPage;\n\n    let dialogElements =\n        state.dialogs.map(d => <DialogsItems key={d.id} id={d.id} name={d.name} avatar={d.avatar} />);\n\n    let messagesElements =\n        state.messages.map(m => <MessagesItems key={m.id} id={m.id} message={m.message} />);\n\n    // let newPostTextMessage = state.newPostTextMessage; дані зі старого стейта\n\n    // let sendMessageClick = () => {\n    //     props.newMessageBody()\n    // };\n\n  let addNewMessageClick = (values) => {\n        props.newMessageBody(values.newPostTextMessage) // нова функція котра бере з пропсів newMessageBody та\n      // та передає данні(нові мессаджі) для форми, newPostTextMessage - назва Fielda в DialogsForm який відповідає за\n      // \"textarea\"\n  };\n\n    // if(!props.isAuth) return <Navigate to={\"/login\"} />; - це була строка яка не пускада нас на сайт,\n    // як що ми не за логинились, зараз ми зробили\n\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                {dialogElements}\n            </div>\n            <div className={classes.messages}>\n                <div>{messagesElements}</div>\n                <div>\n                   <DialogsReduxForm onSubmit={addNewMessageClick} />\n                {/* Сюди вводим  addNewMessageClick - це функція відповідає за відправку месседжів */}\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Dialogs;","import React from 'react';\nimport {newMessageBodyActionCreator} from '../../redux/dialogs-Reducer';\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../Hoc/withAuhRedirect\";\nimport {compose} from \"redux\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogPage: state.dialogPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n\n        newMessageBody: (newMessageBody) => { // тут newMessageBody працює з формою, для того щоб були зміни в Редакс-Формі\n            dispatch(newMessageBodyActionCreator(newMessageBody)) //\n        }\n    }\n}\n// let AuthRedirectComponent = withAuthRedirect(Dialogs); // Хок на редирект, коли ти не за логінений тебе не пустить на страницю\n//\n// const DialogsContainer = connect (mapStateToProps, mapDispatchToProps)(AuthRedirectComponent); // змінили на compose\n\nexport default compose(\n    withAuthRedirect,\n    connect(mapStateToProps, mapDispatchToProps))(Dialogs);\n\n// export default DialogsContainer;"],"sourceRoot":""}