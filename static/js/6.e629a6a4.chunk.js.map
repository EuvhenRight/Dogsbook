{"version":3,"sources":["components/general/Validations/Validations.js","components/general/FormsControl/FormsControl.js","components/general/FormsControl/FormControl.module.css","components/Dialogs/Dialogs.module.css","components/Hoc/withAuhRedirect.js","components/Dialogs/DialogItems/DialogsItems.jsx","components/Dialogs/MessagesItem/MessagesItem.jsx","components/Dialogs/DialogsForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["__webpack_require__","d","__webpack_exports__","required","maxLengthCreator","value","maxLength","length","concat","Textarea","_ref","input","meta","props","Object","_Users_macbook_Documents_JS_React_2_0_it_camasutra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","hasError","touched","error","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","classes","formControl","assign","Input","_ref2","createField","placeholder","name","component","validate","arguments","undefined","text","redux_form__WEBPACK_IMPORTED_MODULE_3__","module","exports","dialogs","dialogsItems","messages","active","dialogsavatar","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","_React$Component","_Users_macbook_Documents_JS_React_2_0_it_camasutra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_macbook_Documents_JS_React_2_0_it_camasutra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_macbook_Documents_JS_React_2_0_it_camasutra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","apply","_Users_macbook_Documents_JS_React_2_0_it_camasutra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","_Users_macbook_Documents_JS_React_2_0_it_camasutra_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","react__WEBPACK_IMPORTED_MODULE_6___default","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","to","React","connect","SelectedDialog","isActive","DialogsItems","react_default","react_router_dom","id","src","avatar","MessagesItems","message","maxLength100","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","Dialogs","dialogPage","dialogElements","map","DialogItems_DialogsItems","messagesElements","m","MessagesItem","Dialogs_DialogsForm","values","newMessageBody","newPostTextMessage","compose","dispatch","newMessageBodyActionCreator"],"mappings":"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","file":"static/js/6.e629a6a4.chunk.js","sourcesContent":["export const required = (value) => {\n    if (value) return undefined;\n\n    return \"Field is required\"; // Якщо в нас в текстеріі не має даних пишимо помилку: \"Field is required\"\n}\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n    if (value.length > maxLength)\n        return `Max Length is ${maxLength} symbols`; // Якщо в нас в текстеріі багато символів пишем помилку:\n    //`Max Length is ${maxLength} symbols`;\n    return undefined;\n}","import React from \"react\";\nimport classes from \"./FormControl.module.css\"\nimport {Field} from \"redux-form\";\nimport {required} from \"../Validations/Validations\";\n\n\nexport const Textarea = ({input, meta, ...props}) => { // REST  оператор, беремо не всі пропси, а тільки ті які нам потрібні\n    const hasError = meta.touched && meta.error;  // Деструктурізація - якщо ти торкнувся або в інпуте помилка\n    return (\n        <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\n            <textarea {...input} {...props}/>\n            <div>\n                {/*Якщо в тебе будуть ошибкі при вводі */}\n                {hasError && <span>{meta.error}</span>}\n            </div>\n\n        </div>\n    )\n}\n\nexport const Input = ({input, meta, ...props}) => {\n    const hasError = meta.touched && meta.error;\n    return (\n        <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\n            <input {...input} {...props}/>\n            <div>\n                {hasError && <span>{meta.error}</span>}\n            </div>\n\n        </div>\n    )\n}\n\nexport const createField = (placeholder, name, component, validate, props = {}, text = \"\") => (\n    <div>\n        <Field placeholder={placeholder}\n               name={name}\n               component={component}\n               validate={validate}\n               {...props}/> {text}\n    </div>\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__1lVtw\",\"error\":\"FormControl_error__1WuHp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1uJ2V\",\"dialogsItems\":\"Dialogs_dialogsItems__2HBFP\",\"messages\":\"Dialogs_messages__1_uzI\",\"active\":\"Dialogs_active__3chAR\",\"dialogsavatar\":\"Dialogs_dialogsavatar__3vR5s\"};","import {Navigate} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) =>({// змінна для того щоб витащити из стора цю строку\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => { // Хок на редирект, коли ти не за логінений тебе не пустить на страницю\n\n    class RedirectComponent extends React.Component {\n        render () {\n            if(!this.props.isAuth) return <Navigate to={\"/login\"} />;\n\n            return <Component {...this.props} /> // Повертає Копмоненту зі всіма пропсами\n        }\n    }\n\n    let connectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);//  робимо Коннект, спочатку\n    // щоб витащити дані зі стора: isAuth: state.auth.isAuth\n\n    return connectAuthRedirectComponent;\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from './../Dialogs.module.css'\n\nconst SelectedDialog = ({ isActive }) => isActive ? classes.active : classes.dialogsItems;\n\nconst DialogsItems = (props) => {\n    return (\n        <div>\n            <NavLink className={SelectedDialog} to={'/dialogs/' + props.id}>\n                <img className={classes.dialogsavatar} src={props.avatar}></img>\n                {props.name}\n            </NavLink>\n        </div>\n    )\n}\n\nexport default DialogsItems;","import React from 'react';\n// import { NavLink } from 'react-router-dom';\nimport classes from './../Dialogs.module.css'\n\nconst MessagesItems = (props) => {\n\n    return (\n        <div className={classes.message}>\n\n            {props.message}\n        </div>\n    )\n}\n\nexport default MessagesItems;","import React from 'react';\nimport classes from './Dialogs.module.css'\nimport {Field, reduxForm} from \"redux-form\"; // форма для ведення месседжів\nimport {Textarea} from \"../general/FormsControl/FormsControl\";\nimport {maxLengthCreator, required} from \"../general/Validations/Validations\";\n\n\nconst maxLength100 = maxLengthCreator(100);\n\nconst DialogsForm = (props) => {\n\n    // let newPostEnterMessage = (e) =>{ // функція яка відправляє повідомлення по кнопці \"Ентер\"\n    //     if(e.key === \"Enter\") {\n    //         props.handleSubmit()\n    //     }\n    // }\n    return ( // дестретуктурізація  props.handleSubmit\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    component={Textarea}\n                    name={\"newPostTextMessage\"} // имʼя компоненти \"textarea\"\n                    placeholder={\"enter message\"}\n                    validate={[required, maxLength100]}\n                    // onKeyPress={} // onKeyPress - назва функціі\n                />\n                {/*  handleSubmit - це Редакс-Форма, в ньому йде формування всіх процесів в формі   */}\n            </div>\n            <div>\n                <button>\n                    Add message\n                </button>\n            </div>\n        </form>\n    )\n}\n\nconst DialogsReduxForm = reduxForm({form: \"Dialogs\"})(DialogsForm); // робимо упаковку для форми для того щоб їй\n// купував DialogsReduxForm (Редакс-Форма)\n\nexport default DialogsReduxForm;","import React from 'react';\nimport classes from './Dialogs.module.css'\nimport DialogsItems from './DialogItems/DialogsItems';\nimport MessagesItems from './MessagesItem/MessagesItem';\nimport DialogsReduxForm from \"./DialogsForm\";\n\n\nconst Dialogs = (props) => {\n\n    let state = props.dialogPage;\n\n    let dialogElements =\n        state.dialogs.map(d => <DialogsItems key={d.id} id={d.id} name={d.name} avatar={d.avatar} />);\n\n    let messagesElements =\n        state.messages.map(m => <MessagesItems key={m.id} id={m.id} message={m.message} />);\n\n    // let newPostTextMessage = state.newPostTextMessage; дані зі старого стейта\n\n    // let sendMessageClick = () => {\n    //     props.newMessageBody()\n    // };\n\n  let addNewMessageClick = (values) => {\n        props.newMessageBody(values.newPostTextMessage) // нова функція котра бере з пропсів newMessageBody та\n      // та передає данні(нові мессаджі) для форми, newPostTextMessage - назва Fielda в DialogsForm який відповідає за\n      // \"textarea\"\n  };\n\n    // if(!props.isAuth) return <Navigate to={\"/login\"} />; - це була строка яка не пускада нас на сайт,\n    // як що ми не за логинились, зараз ми зробили\n\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                {dialogElements}\n            </div>\n            <div className={classes.messages}>\n                <div>{messagesElements}</div>\n                <div>\n                   <DialogsReduxForm onSubmit={addNewMessageClick} />\n                {/* Сюди вводим  addNewMessageClick - це функція відповідає за відправку месседжів */}\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Dialogs;","import React from 'react';\nimport {newMessageBodyActionCreator} from '../../redux/dialogs-Reducer';\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../Hoc/withAuhRedirect\";\nimport {compose} from \"redux\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogPage: state.dialogPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n\n        newMessageBody: (newMessageBody) => { // тут newMessageBody працює з формою, для того щоб були зміни в Редакс-Формі\n            dispatch(newMessageBodyActionCreator(newMessageBody)) //\n        }\n    }\n}\n// let AuthRedirectComponent = withAuthRedirect(Dialogs); // Хок на редирект, коли ти не за логінений тебе не пустить на страницю\n//\n// const DialogsContainer = connect (mapStateToProps, mapDispatchToProps)(AuthRedirectComponent); // змінили на compose\n\nexport default compose(\n    withAuthRedirect,\n    connect(mapStateToProps, mapDispatchToProps))(Dialogs);\n\n// export default DialogsContainer;"],"sourceRoot":""}